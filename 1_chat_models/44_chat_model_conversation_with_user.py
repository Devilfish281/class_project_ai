import os
import sys
import logging
from dotenv import load_dotenv
import re  # Added for apikey validation

from langchain_openai import ChatOpenAI
#AIMessage: Represents a message generated by the AI.
#HumanMessage: Represents a message from the user.
#SystemMessage: A specialized message type that represents instructions or system-level information for the language model.
from langchain.schema import AIMessage, HumanMessage, SystemMessage
from langchain_community.document_loaders import TextLoader


# Configure logging to output to both console and a file
#Use different logging levels (DEBUG, INFO, WARNING, ERROR, CRITICAL) appropriately to categorize log messages.
logging.basicConfig(
    level=logging.INFO,  # Change to DEBUG for more detailed logs
    format='%(asctime)s %(levelname)s %(name)s:%(lineno)d %(message)s',
    handlers=[
        logging.StreamHandler(),  # Console output
        logging.FileHandler("app.log")  # Log file
    ]
)
logger = logging.getLogger(__name__)

# Load environment variables from .env
load_dotenv()

#Confirm API Key is Loaded:
apikey = os.getenv("OPENAI_API_KEY")
if not apikey:
    raise ValueError("OPENAI_API_KEY environment variable not set")
elif not re.search(r'\d', apikey):
    raise ValueError("OPENAI_API_KEY must contain at least one numeric character")
else:
    print("API Key loaded successfully.")



#Start of Code

#Define the directory containing the text file 
current_dir = os.path.dirname(os.path.abspath(__file__))
file_path = os.path.join(current_dir, "messages", "system_message.txt")


# Ensure the text file exists
if not os.path.exists(file_path):
    raise FileNotFoundError(
        f"The file {file_path} does not exist. Please check the path."
    )

# Read the text content from the file with specified encoding
try:
    loader = TextLoader(file_path, encoding='utf-8')  # Specify encoding
    documents = loader.load()
except UnicodeDecodeError as e:
    print(f"Unicode decoding failed: {e}")
    exit(1)
except Exception as e:
    print(f"An unexpected error occurred while loading the document: {e}")
    exit(1)



try:
    #Create a ChatOpenAI model
    model = ChatOpenAI(model="gpt-4o")
except Exception as e:
    logger.error(f"Error during Create a ChatOpenAI model: {e}")
    sys.exit(1)
    


chat_history = []  # Use a list to store messages

# Set an initial system message (optional)
system_message = SystemMessage(content=documents[0].page_content)
chat_history.append(system_message)  # Add system message to chat history


# What electives should I take to be a AI Software Applications Developer ?
# What electives should I take to be a Web Developer ?
# What electives should I take to be a game Developer ?
try:
# Chat loop
    while True:
        query = input("You: ")
        if query.lower() == "exit":
            break
        chat_history.append(HumanMessage(content=query))  # Add user message

        # Get AI response using history
        print("****Working OpenAI****:")
        result = model.invoke(chat_history)
        response = result.content
        chat_history.append(AIMessage(content=response))  # Add AI message

        print(f"AI: {response}")
except Exception as e:
    logger.error(f"Error during OpenAI agent execution: {e}")
    sys.exit(1)    


print("---- Message History ----")
print(chat_history)
